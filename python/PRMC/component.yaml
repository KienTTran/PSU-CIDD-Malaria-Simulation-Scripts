name: Build func
inputs:
- {name: pipeline_config}
- {name: ssh_key}
- {name: script}
- {name: template}
outputs:
- {name: sh}
implementation:
  container:
    image: python:3.8
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'paramiko' 'pyaml' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install
      --quiet --no-warn-script-location 'paramiko' 'pyaml' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - "def build_func(pipeline_config,\n          ssh_key,\n          script,\n  \
      \        template,\n          sh_file):\n\n    import paramiko\n    import yaml\n\
      \    import os\n    from os.path import exists\n    from getpass import getpass\n\
      \n    def cmd_generate(working_path,script_name,parameters):\n        return\
      \  'cd ' + working_path + \\\n                '; python3 ' + script_name + '\
      \ ' + parameters\n\n    def cmd_git_pull(project_path, build_repo_url, build_repo_branch):\n\
      \        project_name = project_path.split('/')[-1]\n        project_parent_path\
      \ = project_path.replace(project_name,'')\n        return  'cd ' + project_parent_path\
      \ + \\\n                '; git clone ' + build_repo_url + \" \" + project_name\
      \ + \" -b \" + build_repo_branch + \\\n                '; ls -l ' + project_name\
      \ + \\\n                '; cd ' + project_name + \\\n                '; git\
      \ checkout ' + build_repo_branch\n\n    def cmd_git_checkout(project_path, build_repo_branch):\n\
      \        return  'cd ' + project_path + \\\n                '; git checkout\
      \ ' + build_repo_branch\n\n    def cmd_build(project_path, build_script_name,\
      \ parameters):\n        return  'cd ' + project_path + \\\n                ';\
      \ pwd' + \\\n                '; chmod +x ' + build_script_name + \\\n      \
      \          '; sh ' + build_script_name + ' ' + parameters\n\n    def generate_build_script(template_file,\
      \ \n                              username, \n                             \
      \ sh_file = 'build.sh'):       \n        f = open(template_file,'r')\n     \
      \   template = f.read()\n        f.close()\n        build_sh_file_data = template.replace(\"\
      #username#\",username)\n        print('Writing build script username: ' + str(username))\n\
      \        f = open(sh_file,'w')\n        f.write(build_sh_file_data)\n      \
      \  f.close()\n\n    class PipelineClient():\n        ssh = paramiko.SSHClient()\n\
      \        sftp = 0\n\n        def read_parameters(self, input_yaml):\n      \
      \      print(\"Reading \" + input_yaml)\n            with open(input_yaml,'r')\
      \ as file:\n                return yaml.full_load(file)\n\n        def disconnect(self):\n\
      \            self.ssh.close()\n            self.sftp.close()\n\n        def\
      \ run_cmd_locally(self,command):\n            print(\"[Local] >>> \", command)\n\
      \            try:\n                os.system(command)\n            except Exception\
      \ as e:\n                print('Run cmd locally with error ' + str(e))\n   \
      \             exit(0)\n\n        def run_cmd_remotely(self,command):\n     \
      \       print(\"[Remote] >>> \", command)\n            (stdin, stdout, stderr)\
      \ = self.ssh.exec_command(command,get_pty=True)\n            for line in stdout.readlines():\n\
      \                print(line)\n            err = stderr.read().decode()\n   \
      \         if err:\n                print(err)\n\n        def print_path_exist_locally(self,file_path):\n\
      \            if exists(file_path):\n                print(file_path + ' exists')\n\
      \            else:\n                print(file_path + ' does not exist')\n\n\
      \        def print_dir_path_exist_remotely(self,file_path):\n            try:\n\
      \                self.sftp.chdir(file_path) # sub-directory exists\n       \
      \         print(file_path + ' exists')\n                return True\n      \
      \      except IOError:\n                print(file_path + ' does not exist')\n\
      \                return False\n\n        def print_file_path_exist_remotely(self,file_path):\n\
      \            try:\n                self.sftp.stat(file_path) # sub-directory\
      \ exists\n                print(file_path + ' exists')\n                return\
      \ True\n            except IOError:\n                print(file_path + ' does\
      \ not exist')\n                return False\n\n        def mkdir_nested(self,\
      \ remote_directory):\n            \"\"\"Change to this directory, recursively\
      \ making new folders if needed.\n            Returns True if any folders were\
      \ created.\"\"\"\n            if remote_directory == '/':\n                #\
      \ absolute path so change directory to root\n                self.sftp.chdir('/')\n\
      \                return\n            if remote_directory == '':\n          \
      \      # top-level relative directory must exist\n                return\n \
      \           try:\n                self.sftp.chdir(remote_directory) # sub-directory\
      \ exists\n            except IOError:\n                dirname, basename = os.path.split(remote_directory.rstrip('/'))\n\
      \                self.mkdir_nested(dirname) # make parent directories\n    \
      \            self.sftp.mkdir(basename) # sub-directory missing, so created it\n\
      \                self.sftp.chdir(basename)\n                return True\n\n\
      \        def connect(self, host, username, key):\n            if key != 0:\n\
      \                self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n\
      \                key = paramiko.Ed25519Key.from_private_key_file(key)\n    \
      \            self.ssh.connect(hostname=host, username=username, pkey=key)\n\
      \                print('Logged in to server')\n            else:\n         \
      \       self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n   \
      \             input_pass = getpass('\\nEnter password to login to server: ')\n\
      \                try:\n                    self.ssh.connect(host, 22, username,\
      \ input_pass, allow_agent=False, look_for_keys=False)\n                    key_auth\
      \ = str(self.ssh.get_transport())\n                    if 'awaiting auth' in\
      \ key_auth:\n                        self.ssh.get_transport().auth_interactive_dumb(username,\
      \ handler=None, submethods='')\n                except (paramiko.SSHException)\
      \ as e:\n                    print('Cannot login with error ' + str(e))  \n\
      \                    print('Please check password or OTP on mobile')\n     \
      \               exit(0)\n\n            self.sftp = self.ssh.open_sftp()\n  \
      \          return self.ssh, self.sftp\n\n    client = PipelineClient()\n   \
      \ print(pipeline_config)\n    params = client.read_parameters(pipeline_config)\n\
      \    print(params)\n    ssh, sftp = client.connect(params['ssh']['address'],\
      \ params['ssh']['username'],ssh_key)\n    client.run_cmd_remotely('ls -l')\n\
      \n    print(script)\n    print(template)\n\n    generate_build_script(template,\
      \ params['ssh']['username'], sh_file)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Build\
      \ func', description='')\n_parser.add_argument(\"--pipeline-config\", dest=\"\
      pipeline_config\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
      --ssh-key\", dest=\"ssh_key\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--script\", dest=\"script\", type=str, required=True,\
      \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--template\", dest=\"template\"\
      , type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
      --sh\", dest=\"sh_file\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parsed_args = vars(_parser.parse_args())\n\n_outputs = build_func(**_parsed_args)\n"
    args:
    - --pipeline-config
    - {inputPath: pipeline_config}
    - --ssh-key
    - {inputPath: ssh_key}
    - --script
    - {inputPath: script}
    - --template
    - {inputPath: template}
    - --sh
    - {outputPath: sh}
