name: Parse pipeline config func
inputs:
- {name: pipeline_config}
outputs:
- {name: remote_repo, type: JsonArray}
- {name: remote_exe_build, type: JsonArray}
- {name: remote_exe_run, type: JsonArray}
- {name: remote_files, type: JsonArray}
- {name: remote_dirs, type: JsonArray}
- {name: remote_generators, type: JsonArray}
- {name: remote_schedulers, type: JsonArray}
implementation:
  container:
    image: python:3.8
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'pyaml' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'pyaml' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - "def parse_pipeline_config_func(pipeline_config):\n    import yaml\n    import\
      \ os\n    from collections import namedtuple\n\n    print('Parsing pipeline')\n\
      \n    params = 0\n    print(\"Reading \" + pipeline_config)\n    with open(pipeline_config,'r')\
      \ as file:\n        params =  yaml.full_load(file)\n\n    cluster_username =\
      \ params['ssh']['username']\n    cluster_home_path = \"/storage/home/\" + cluster_username[0]\
      \ + \"/\" + cluster_username\n\n    #Repo\n    cluster_repo = []\n    cluster_exe_build\
      \ = []\n    cluster_exe_run = []\n    for pair in params['project']:\n     \
      \   if type(pair) == str:\n            print('Project is empty')\n        else:\n\
      \            for p_key in pair.keys():\n                if pair[p_key] == None:\n\
      \                    print('Project is empty')\n                else:\n    \
      \                pj_path = p_key\n                    pj_exe = pair[p_key]['exe']\n\
      \                    if pj_exe == None:\n                        print('Execution\
      \ is empty')\n                    else:\n                        pj_exe_build_path\
      \ = pair[p_key]['exe']['build']['path']\n                        pj_exe_run_path\
      \ = pair[p_key]['exe']['run']['path']\n                        if pj_exe_build_path\
      \ == None or pj_exe_run_path == None:\n                            print('Execution\
      \ build/run path is empty')\n                        else:\n               \
      \             #Build\n                            parameter_str = ''\n     \
      \                       try:\n                                pj_exe_build_parameters\
      \ = pair[p_key]['exe']['build']['parameters']\n                            \
      \    if pj_exe_build_parameters != None:\n                                 \
      \   for parameter in pj_exe_build_parameters:\n                            \
      \            parameter_str += ' ' + parameter\n                            except\
      \ Exception as e:\n                                print('Missing ' + str(e)\
      \ + ', use empty parameters')\n                            pj_exe_build_with_parameters\
      \ = pj_exe_build_path + ' ' + parameter_str\n                            cluster_exe_build.append({os.path.join(cluster_home_path,pj_path):pj_exe_build_with_parameters})\n\
      \                            #Run\n                            parameter_str\
      \ = ''\n                            try:\n                                pj_exe_run_parameters\
      \ = pair[p_key]['exe']['run']['parameters']\n                              \
      \  if pj_exe_run_parameters != None:\n                                    for\
      \ parameter in pj_exe_run_parameters:\n                                    \
      \    parameter_str += ' ' + parameter\n                            except Exception\
      \ as e:\n                                print('Missing ' + str(e) + ', use\
      \ empty parameters')\n                            pj_exe_run_with_parameters\
      \ = os.path.join(cluster_home_path,pj_exe_run_path) + ' ' + parameter_str\n\
      \                            cluster_exe_run.append({os.path.join(cluster_home_path,pj_path):pj_exe_run_with_parameters})\n\
      \                        #Repo        \n                        pj_repo = pair[p_key]['repo']\n\
      \                        if pj_repo == None:\n                            print('Repo\
      \ is empty')\n                        else:\n                            pj_repo_url\
      \ = pair[p_key]['repo']['url']\n                            if pj_repo_url ==\
      \ None:\n                                print('Repo URL is empty')\n      \
      \                      else:\n                                pj_repo_branch\
      \ = pair[p_key]['repo']['branch']\n                                pj_repo_git\
      \ = ''\n                                if pj_repo_branch == None:\n       \
      \                             pj_repo_git = pj_repo_url\n                  \
      \              else:\n                                    pj_repo_git = pj_repo_url\
      \ + ' -b ' + pj_repo_branch\n                                cluster_repo.append({os.path.join(cluster_home_path,pj_path):pj_repo_git})\n\
      \n    #Files\n    cluster_files = []\n    cluster_dirs = []\n    for pair in\
      \ params['remote']:\n        if type(pair) == str:\n            cluster_dirs.append(os.path.join(cluster_home_path,pair))\n\
      \        else:\n            for key in pair.keys():\n                path =\
      \ key\n                src_files = pair[key]\n                cluster_dirs.append(os.path.join(cluster_home_path,path))\n\
      \                for src_file in src_files:\n                    cluster_files.append({os.path.join(cluster_home_path,path)\
      \ : src_file})\n                    print(src_file + ' --> ' + os.path.join(cluster_home_path,path))\n\
      \n    #Generators                    \n    cluster_generators = []\n    for\
      \ gen_pair in params['generator']:\n        for gen_key in gen_pair.keys():\n\
      \            working_path = gen_key\n            gen_value = gen_pair[gen_key]\n\
      \            script_with_parameters = ''\n            is_valid = False\n   \
      \         if gen_value != None:\n                for value in gen_value:\n \
      \                   for v_key in value.keys():\n                        script\
      \ = ''\n                        script_name = ''\n                        if\
      \ v_key =='bash':\n                            bash_str = ''\n             \
      \               if value[v_key] != None:\n                                script_name\
      \ = value[v_key]\n                                script = script_name\n   \
      \                             is_valid = True\n                        elif\
      \ v_key == 'script':\n                            if value[v_key] != None:\n\
      \                                try:\n                                    script_name\
      \ = value[v_key]['name']\n                                    script_exe = ''\n\
      \                                    parameter_str = ''\n                  \
      \                  if script_name != None and script_name != '':\n         \
      \                               script_ext = script_name.split('.')[-1]\n  \
      \                                      if script_ext == 'py':\n            \
      \                                script_exe = 'python3'\n                  \
      \                      if script_ext == 'sh':\n                            \
      \                script_exe = 'sh'\n                                       \
      \ try:\n                                            script_parameters = value[v_key]['parameters']\n\
      \                                            if script_parameters != None:\n\
      \                                                for parameter in script_parameters:\n\
      \                                                    parameter_str += ' ' +\
      \ parameter\n                                            else:\n           \
      \                                     print('No parameters')     \n        \
      \                                except Exception as e:\n                  \
      \                          print('Missing: ' + str(e) + ', use empty parameters')\n\
      \                                        script = script_exe + ' ' + script_name\
      \ + parameter_str\n                                        is_valid = True\n\
      \                                    else:\n                               \
      \         print('Script name is empty, skipped')   \n                      \
      \          except Exception as e:\n                                    print('Missing:\
      \ ' + str(e) + ', skipped')\n                            else:\n           \
      \                     print('Script is empty, skipped')\n                  \
      \      if script_with_parameters == '':\n                            script_with_parameters\
      \ = script\n                        else:\n                            script_with_parameters\
      \ = script_with_parameters + ' && ' + script\n                if is_valid:\n\
      \                    cluster_generators.append({os.path.join(cluster_home_path,working_path):script_with_parameters})\n\
      \            else:\n                print('Missing script when path is available,\
      \ skipped')\n\n    #Scheduler\n    cluster_schedulers = []\n    for sche_pair\
      \ in params['scheduler']:\n        for s_key in sche_pair.keys():\n        \
      \    if sche_pair[s_key] == None:\n                print('No script supplied\
      \ to scheduler, skipped')\n            else:\n                for sche_script\
      \ in sche_pair[s_key]:\n                    cluster_schedulers.append({os.path.join(cluster_home_path,s_key):sche_script})\
      \    \n    #Repo\n    for file_path in cluster_repo:\n        for key in file_path.keys():\n\
      \            print('Cluster repo (clone): ' + key + ' --> ' + file_path[key])\
      \ \n\n    #Build       \n    for file_path in cluster_exe_build:\n        for\
      \ key in file_path.keys():\n            print('Cluster exe (build): ' + key\
      \ + ' ' + file_path[key]) \n\n    #Run       \n    for file_path in cluster_exe_run:\n\
      \        for key in file_path.keys():\n            print('Cluster exe (run):\
      \ ' + key + ' ./' + file_path[key])          \n\n    #Files\n    for file_path\
      \ in cluster_files:\n        for key in file_path.keys():\n            print('Cluster\
      \ file path (transfer): ' + key + ' --> ' + file_path[key])\n\n    #Dirs\n \
      \   for file_path in cluster_dirs:\n        print('Cluster file path (create):\
      \ ' + file_path)\n\n    #Generators\n    for generators in cluster_generators:\n\
      \        for working_path in generators.keys():\n            print('cd ' + working_path\
      \ + ' run script ' + generators[working_path])\n\n    for schedulers in cluster_schedulers:\n\
      \        for working_path in schedulers.keys():\n            print('cd ' + working_path\
      \ + ' qsub ' + schedulers[working_path])\n\n    remote_output = namedtuple('outputs',\
      \ ['remote_repo','remote_exe_build','remote_exe_run',\n                    \
      \                   'remote_files','remote_dirs','remote_generators',\n    \
      \                                   'remote_schedulers'])\n\n    return remote_output(cluster_repo,cluster_exe_build,cluster_exe_run,\n\
      \                         cluster_files,cluster_dirs,cluster_generators,cluster_schedulers)\n\
      \ndef _serialize_json(obj) -> str:\n    if isinstance(obj, str):\n        return\
      \ obj\n    import json\n\n    def default_serializer(obj):\n        if hasattr(obj,\
      \ 'to_struct'):\n            return obj.to_struct()\n        else:\n       \
      \     raise TypeError(\n                \"Object of type '%s' is not JSON serializable\
      \ and does not have .to_struct() method.\"\n                % obj.__class__.__name__)\n\
      \n    return json.dumps(obj, default=default_serializer, sort_keys=True)\n\n\
      import argparse\n_parser = argparse.ArgumentParser(prog='Parse pipeline config\
      \ func', description='')\n_parser.add_argument(\"--pipeline-config\", dest=\"\
      pipeline_config\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
      ----output-paths\", dest=\"_output_paths\", type=str, nargs=7)\n_parsed_args\
      \ = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\"\
      , [])\n\n_outputs = parse_pipeline_config_func(**_parsed_args)\n\n_output_serializers\
      \ = [\n    _serialize_json,\n    _serialize_json,\n    _serialize_json,\n  \
      \  _serialize_json,\n    _serialize_json,\n    _serialize_json,\n    _serialize_json,\n\
      \n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n\
      \        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n  \
      \      pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
    args:
    - --pipeline-config
    - {inputPath: pipeline_config}
    - '----output-paths'
    - {outputPath: remote_repo}
    - {outputPath: remote_exe_build}
    - {outputPath: remote_exe_run}
    - {outputPath: remote_files}
    - {outputPath: remote_dirs}
    - {outputPath: remote_generators}
    - {outputPath: remote_schedulers}
